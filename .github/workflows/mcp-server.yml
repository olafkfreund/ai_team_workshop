name: MCP Server CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'workshop/mpc-server/**'
      - '.github/workflows/mcp-server.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'workshop/mpc-server/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  IMAGE_NAME: mcp-server
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd workshop/mpc-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 bandit safety mypy pytest-cov
    
    - name: Run Black (code formatting)
      run: |
        cd workshop/mpc-server
        black --check --diff .
    
    - name: Run Flake8 (linting)
      run: |
        cd workshop/mpc-server
        flake8 . --max-line-length=88 --exclude=venv,__pycache__
    
    - name: Run Bandit (security)
      run: |
        cd workshop/mpc-server
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --format txt
    
    - name: Run Safety (dependency security)
      run: |
        cd workshop/mpc-server
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run MyPy (type checking)
      run: |
        cd workshop/mpc-server
        mypy . --ignore-missing-imports || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          workshop/mcp-server/bandit-report.json
          workshop/mpc-server/safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd redis-cli ping --health-interval 10s --health-timeout 5s --health-retries 5
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd workshop/mpc-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Run unit tests
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MCP_DEBUG: true
        ENABLE_CACHING: true
      run: |
        cd workshop/mpc-server
        pytest test_mcp_server.py -v --cov=. --cov-report=xml --cov-report=html --junit-xml=test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          workshop/mcp-server/test-results.xml
          workshop/mpc-server/htmlcov/
          workshop/mcp-server/coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: workshop/mcp-server/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build and Push Docker Image
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: workshop/mpc-server
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Development Deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: development
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Instances
      id: deploy
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        dns-name-label: mcp-server-dev-${{ github.sha }}
        image: ${{ needs.build.outputs.image-tag }}
        name: mcp-server-dev
        location: 'East US'
        ports: '8080'
        cpu: 1
        memory: 2
        environment-variables: |
          MCP_HOST=0.0.0.0
          MCP_PORT=8080
          MCP_DEBUG=true
          ENABLE_CACHING=true
          ENABLE_AUDIT_LOGGING=true
        secure-environment-variables: |
          AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
    
    - name: Run smoke tests
      run: |
        APP_URL="${{ steps.deploy.outputs.app-url }}"
        echo "Testing health endpoint..."
        curl -f "$APP_URL/health" || exit 1
        
        echo "Testing agent endpoint..."
        RESPONSE=$(curl -s -X POST "$APP_URL/agent/azureVmMetricsAgent" \
          -H "Content-Type: application/json" \
          -d '{"prompt": "Test deployment"}')
        echo "Response: $RESPONSE"
        
        if echo "$RESPONSE" | jq -e '.status == "success"' > /dev/null; then
          echo "✅ Smoke tests passed"
        else
          echo "❌ Smoke tests failed"
          exit 1
        fi

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy infrastructure with Bicep
      run: |
        az deployment group create \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --template-file workshop/deployment/main.bicep \
          --parameters \
            environment=staging \
            appName=mcp-server \
            containerRegistryName=${{ secrets.AZURE_CONTAINER_REGISTRY }}
    
    - name: Update container image
      run: |
        az container restart \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --name "mcp-server-staging-aci"
    
    - name: Run integration tests
      run: |
        cd workshop/mpc-server
        pip install -r requirements.txt
        pip install pytest requests
        
        # Set staging URL
        export MCP_SERVER_URL="https://mcp-server-staging-aci.eastus.azurecontainer.io:8080"
        
        # Run integration tests
        python -m pytest test_mcp_server.py::TestIntegrationScenarios -v

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
    
    - name: Deploy production infrastructure
      run: |
        chmod +x workshop/deployment/deploy.sh
        cd workshop/deployment
        ./deploy.sh \
          --resource-group "mcp-server-prod" \
          --environment "prod" \
          --container-registry "${{ secrets.AZURE_CONTAINER_REGISTRY }}"
    
    - name: Run production health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        PROD_URL=$(az deployment group show \
          --resource-group "mcp-server-prod" \
          --name "main" \
          --query properties.outputs.mcpServerUrl.value \
          --output tsv)
        
        echo "Testing production deployment at: $PROD_URL"
        
        # Health check
        for i in {1..10}; do
          if curl -f "$PROD_URL/health" > /dev/null 2>&1; then
            echo "✅ Production health check passed"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Production health check failed"
            exit 1
          fi
        done
        
        # Load test
        python -c "
        import requests
        import time
        
        url = '$PROD_URL'
        start_time = time.time()
        
        for i in range(10):
            response = requests.post(f'{url}/agent/azureVmMetricsAgent', 
                                   json={'prompt': 'Production test'})
            assert response.status_code == 200
            
        end_time = time.time()
        avg_time = (end_time - start_time) / 10
        print(f'✅ Production load test passed. Avg response time: {avg_time:.2f}s')
        "

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests pytest locust
    
    - name: Run load tests
      run: |
        cd workshop/mpc-server
        python -c "
        from test_mcp_server import LoadTester
        
        # Run load test against staging
        tester = LoadTester()
        results = tester.run_load_test('https://mcp-server-staging-aci.eastus.azurecontainer.io:8080', 100, 10)
        
        print('Performance Test Results:')
        print(f'Success Rate: {results[\"success_rate\"]:.2f}%')
        print(f'Avg Response Time: {results[\"avg_response_time\"]:.2f}ms')
        print(f'95th Percentile: {results[\"p95_response_time\"]:.2f}ms')
        
        # Performance assertions
        assert results['success_rate'] > 95, f'Success rate too low: {results[\"success_rate\"]}%'
        assert results['avg_response_time'] < 2000, f'Avg response time too high: {results[\"avg_response_time\"]}ms'
        "

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://mcp-server-staging-aci.eastus.azurecontainer.io:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Cleanup old container instances
      run: |
        # Keep only the 3 most recent dev deployments
        az container list \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --query "[?starts_with(name, 'mcp-server-dev-')] | sort_by(@, &properties.instanceView.currentState.startTime) | [:-3].name" \
          --output tsv | \
        xargs -r -I {} az container delete \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --name {} \
          --yes
    
    - name: Cleanup old Docker images
      run: |
        # Delete images older than 30 days
        az acr repository show-tags \
          --name "${{ secrets.AZURE_CONTAINER_REGISTRY }}" \
          --repository "${{ env.IMAGE_NAME }}" \
          --output tsv \
          --orderby time_desc | \
        tail -n +10 | \
        xargs -r -I {} az acr repository delete \
          --name "${{ secrets.AZURE_CONTAINER_REGISTRY }}" \
          --image "${{ env.IMAGE_NAME }}:{}" \
          --yes
